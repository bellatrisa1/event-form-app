// src/components/CreateForm.tsx
import React, { useState } from "react";
import { useNavigate } from "react-router-dom";
import { collection, addDoc, serverTimestamp } from "firebase/firestore";
import { db } from "../firebase/config";
import { FormItem } from "../types";

const ICON_OPTIONS = [
  { value: "users", label: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", icon: "üë•" },
  { value: "mic", label: "–ú–∏–∫—Ä–æ—Ñ–æ–Ω", icon: "üé§" },
  { value: "book-open", label: "–õ–µ–∫—Ü–∏—è", icon: "üìñ" },
  { value: "calendar", label: "–ö–∞–ª–µ–Ω–¥–∞—Ä—å", icon: "üìÖ" },
] as const;

const COLOR_OPTIONS = [
  { value: "orange", label: "–û—Ä–∞–Ω–∂–µ–≤—ã–π", color: "#FFEDD5" },
  { value: "purple", label: "–§–∏–æ–ª–µ—Ç–æ–≤—ã–π", color: "#EEF2FF" },
  { value: "blue", label: "–°–∏–Ω–∏–π", color: "#EFF6FF" },
  { value: "green", label: "–ó–µ–ª—ë–Ω—ã–π", color: "#ECFCCB" },
  { value: "red", label: "–ö—Ä–∞—Å–Ω—ã–π", color: "#FEE2E2" },
] as const;

interface FormData {
  title: string;
  icon: string;
  color: string;
}

const CreateForm: React.FC = () => {
  const [formData, setFormData] = useState<FormData>({
    title: "",
    icon: "users",
    color: "orange",
  });
  const [error, setError] = useState<string | null>(null);
  const [success, setSuccess] = useState<string | null>(null);
  const [isSubmitting, setIsSubmitting] = useState(false);

  const navigate = useNavigate();

  const handleChange = (
    e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>
  ) => {
    const { name, value } = e.target;
    setFormData((prev) => ({ ...prev, [name]: value }));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError(null);
    setSuccess(null);

    if (!formData.title.trim()) {
      setError("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã.");
      return;
    }

    setIsSubmitting(true);

    try {
      const newForm: Omit<FormItem, "id"> = {
        title: formData.title.trim(),
        date: new Date().toISOString(),
        submissions: 0,
        lastUpdated: "–¢–æ–ª—å–∫–æ —á—Ç–æ",
        icon: formData.icon,
        color: formData.color,
      };

      await addDoc(collection(db, "forms"), {
        ...newForm,
        createdAt: serverTimestamp(),
        lastUpdated: serverTimestamp(),
      });

      setSuccess("–§–æ—Ä–º–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!");
      setTimeout(() => navigate("/dashboard"), 1500);
    } catch (err) {
      setError("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–æ—Ä–º—ã: " + (err as Error).message);
      setIsSubmitting(false);
    }
  };

  return (
    <div className="container">
      <h1>–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Ñ–æ—Ä–º—É</h1>
      <form onSubmit={handleSubmit} className="registration-form">
        <div className="form-group">
          <label htmlFor="title">–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã</label>
          <input
            type="text"
            id="title"
            name="title"
            value={formData.title}
            onChange={handleChange}
            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –í–µ—á–µ—Ä–∏–Ω–∫–∞ –≤—ã–ø—É—Å–∫–Ω–∏–∫–æ–≤"
            maxLength={50}
          />
        </div>

        <div className="form-group">
          <label htmlFor="icon">–ò–∫–æ–Ω–∫–∞</label>
          <select
            id="icon"
            name="icon"
            value={formData.icon}
            onChange={handleChange}
            className="w-full p-2 border border-gray-300 rounded"
          >
            {ICON_OPTIONS.map((opt) => (
              <option key={opt.value} value={opt.value}>
                {opt.icon} {opt.label}
              </option>
            ))}
          </select>
        </div>

        <div className="form-group">
          <label>–¶–≤–µ—Ç</label>
          <div className="flex gap-2 flex-wrap">
            {COLOR_OPTIONS.map((colorOpt) => (
              <label
                key={colorOpt.value}
                className={`flex items-center gap-2 px-3 py-2 rounded-lg border-2 cursor-pointer ${
                  formData.color === colorOpt.value
                    ? "border-gray-800"
                    : "border-gray-300"
                }`}
              >
                <input
                  type="radio"
                  name="color"
                  value={colorOpt.value}
                  checked={formData.color === colorOpt.value}
                  onChange={handleChange}
                  className="sr-only"
                />
                <span
                  className="w-4 h-4 rounded-full"
                  style={{ backgroundColor: colorOpt.color }}
                ></span>
                {colorOpt.label}
              </label>
            ))}
          </div>
        </div>

        {error && <p className="error">{error}</p>}
        {success && <p className="success">{success}</p>}

        <div className="form-actions">
          <button
            type="submit"
            className="primary-button"
            disabled={isSubmitting}
          >
            {isSubmitting ? "–°–æ–∑–¥–∞–Ω–∏–µ..." : "–°–æ–∑–¥–∞—Ç—å —Ñ–æ—Ä–º—É"}
          </button>
          <button
            type="button"
            className="secondary-button"
            onClick={() => navigate("/dashboard")}
            disabled={isSubmitting}
          >
            –û—Ç–º–µ–Ω–∞
          </button>
        </div>
      </form>
    </div>
  );
};

export default CreateForm;
