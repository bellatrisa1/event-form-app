import React, { useState, useEffect } from "react";
import { useParams, useNavigate } from "react-router-dom";
import {
  doc,
  getDoc,
  collection,
  addDoc,
  serverTimestamp,
} from "firebase/firestore";
import { db } from "../firebase/config";
import { FormItem } from "../types";

const RegistrationForm: React.FC = () => {
  const { id } = useParams<{ id: string }>();
  const navigate = useNavigate();

  const [form, setForm] = useState<FormItem | null>(null);
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);

  const [formData, setFormData] = useState({
    name: "",
    email: "",
  });

  const [submitSuccess, setSubmitSuccess] = useState<boolean>(false);

  useEffect(() => {
    const fetchForm = async () => {
      if (!id) return;
      try {
        const formDoc = doc(db, "forms", id);
        const formSnap = await getDoc(formDoc);

        if (formSnap.exists()) {
          setForm({ id: formSnap.id, ...formSnap.data() } as FormItem);
          setLoading(false);
        } else {
          setError("–§–æ—Ä–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.");
          setLoading(false);
        }
      } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ä–º—ã:", err);
        setError("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ä–º—É.");
        setLoading(false);
      }
    };

    fetchForm();
  }, [id]);

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setFormData((prev) => ({ ...prev, [name]: value }));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!formData.name.trim() || !formData.email.trim()) {
      setError("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è.");
      return;
    }

    if (!id) return;

    try {
      await addDoc(collection(db, "registrations"), {
        formId: id,
        ...formData,
        submittedAt: serverTimestamp(),
      });

      // –û–±–Ω–æ–≤–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤ –≤ —Ñ–æ—Ä–º–µ
      // (–º–æ–∂–Ω–æ –ø–æ–∑–∂–µ —Å–¥–µ–ª–∞—Ç—å —á–µ—Ä–µ–∑ Cloud Function, –Ω–æ –ø–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ UI-–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ)
      // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ ‚Äî –ª—É—á—à–µ –æ–±–Ω–æ–≤–ª—è—Ç—å `submissions` —á–µ—Ä–µ–∑ Cloud Function –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏

      setSubmitSuccess(true);
      setError(null);
    } catch (err) {
      setError("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: " + (err as Error).message);
    }
  };

  if (loading) {
    return (
      <div className="registration-container">
        <div className="container">–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ä–º—ã...</div>
      </div>
    );
  }

  if (error && !submitSuccess) {
    return (
      <div className="registration-container">
        <div className="container error">{error}</div>
      </div>
    );
  }

  if (submitSuccess) {
    return (
      <div className="registration-container">
        <div className="container success-container">
          <h2>‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!</h2>
          <p>
            –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ <strong>{form?.title}</strong> —É—Å–ø–µ—à–Ω–æ
            –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.
          </p>
          <button className="primary-button" onClick={() => navigate("/")}>
            –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="registration-container">
      <div className="container">
        <div
          className="form-header"
          style={{ backgroundColor: getColorBg(form?.color) }}
        >
          <div className="icon" style={{ color: getColorText(form?.color) }}>
            {getIcon(form?.icon)}
          </div>
          <h1>{form?.title}</h1>
          <p>–ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ.</p>
        </div>

        <form onSubmit={handleSubmit} className="registration-form">
          <div className="form-group">
            <label htmlFor="name">–í–∞—à–µ –∏–º—è *</label>
            <input
              type="text"
              id="name"
              name="name"
              value={formData.name}
              onChange={handleChange}
              placeholder="–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤"
              required
            />
          </div>

          <div className="form-group">
            <label htmlFor="email">Email *</label>
            <input
              type="email"
              id="email"
              name="email"
              value={formData.email}
              onChange={handleChange}
              placeholder="example@domain.com"
              required
            />
          </div>

          {error && <p className="error">{error}</p>}

          <div className="form-actions">
            <button type="submit" className="primary-button">
              –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function getIcon(iconName?: string) {
  switch (iconName) {
    case "users":
      return "üë•";
    case "mic":
      return "üé§";
    case "book-open":
      return "üìñ";
    case "calendar":
      return "üìÖ";
    default:
      return "üé´";
  }
}

function getColorBg(color?: string) {
  const colors: Record<string, string> = {
    orange: "#ffedd5",
    purple: "#eeecfe",
    blue: "#eff6ff",
    green: "#ecfccb",
    red: "#fee2e2",
  };
  return colors[color || "orange"];
}

function getColorText(color?: string) {
  const colors: Record<string, string> = {
    orange: "#9a3412",
    purple: "#5b21b6",
    blue: "#1e40af",
    green: "#166534",
    red: "#b91c1c",
  };
  return colors[color || "orange"];
}

export default RegistrationForm;
